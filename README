COMP 770 - PA1, PA4
===================

This repository is a combination of two separate assignments, which has five parts
total, as described in pa1.pdf and pa4.pdf:

    * Intersections
    * Intersections + shading
    * Intersections + shading + antialiasing
    * Intersections + shading + antialiasing + reflections
    * kd-trees

I have provided a Makefile which can be used to build and render images either
individually or all at once. Note that I have only tested this code with g++
4.8 on Ubuntu 14.04.

There are two ways to render the images:
    1. Using OpenGL and GLUT
    2. Writing .ppm files to disk

If you have OpenGL and GLUT installed ("freeglut3-dev" and "freeglut3"
libraries on Ubuntu 14.04), you can build and render all three images using
OpenGL with "make gl".

If you don't have OpenGL and GLUT installed, you can still render the images
as .ppm files written to disk with "make ppm" (running just "make" will also
default to "make ppm").

Once you finish, "make clean" will remove all the executables.

If you go the non-GL route, there are no external dependencies for this 
project other than a C++11 compiler and the standard library. I use Eigen for
linear algebra and a custom library for parsing commandline arguments, but
those have been included for convenience. I also use OpenMP to shave a few
seconds off the running times of Part 3 and 4, but you can choose not to run 
with OpenMP if you wish ("make no-omp" and "make gl-no-omp"). Even without
OpenMP, running all the code shouldn't take more than a few seconds.

For Part 3 and 4, I used uniform sampling instead of random sampling to 
generate the 64 sample rays within each pixel--the results looked identical, 
and the uniform sampling had better performance.

NOTE: I chose .ppm as my image format because it's the easiest format to write
      to. However, it's possible that the default image viewer in Windows
      can't open files of that type. I've included .png versions in the
      "images/pngs" directory just in case, but keep in mind that the code
      will still only produce .ppm files.

NOTE: If you choose to render the images as .ppm files to disk, running the
      kd-tree code will produce a nice little status bar to let you know how 
      far along you are in the intersection calculations. Unfortunately, 
      because of the asynchronous nature of OpenGL windows, this same 
      functionality is not present when rendering to an OpenGL window. Be 
      aware that it will take about a minute for the windows to pop up, even
      if the console says that it's done.
